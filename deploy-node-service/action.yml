name: 'Deploy Node Service'
description: 'Deploy a systemd service running Node.JS'
inputs:
  hosts:
    required: true
    description: 'A JSON array of hostnames to deploy the node service to: [{"hostname": "localhost","connection": "ssh", "username": "ansible"}]'
  service_name:
    required: true
    description: "The name of the systemd service, if it doesn't exist it will be created on the target host"
    default: 'node-systemd-service'
  service_account:
    required: true
    description: "The service account that will run the service, if it doesn't exist it will be created"
    default: 'node-systemd-user'
  source_folder:
    required: true
    description: "Path to the service source folder"
  should_restart:
    required: true
    description: "If the service should be restarted after updating"
    default: 'false'
  description:
    required: true
    description: "The system unit description"
  after:
    required: true
    description: "The target to run the system after"
    default: "network.target"
  working_directory:
    required: true
    description: "The working directory of the service"
    default: "/opt/curium/node-systemd-service"
  start_command:
    required: true
    description: "The start command for the service"
    default: "npm start"
  restart_policy:
    required: true
    description: "The restart policy of the service"
    default: "on-failure"
  target:
    required: true
    description: "The target to include the service in"
    default: "multi-user.target"
  node_version:
    required: true
    description: "The node version to package with the service"
    default: "lts/fermium"
runs:
  using: "composite"
  steps:
  - run: ansible-galaxy collection install bryopsida.nexus
    shell: bash
  - env:
      HOSTS: ${{ inputs.hosts }}
    run: |
      function create_inventory {
        json_str=$1
        for row in $(echo "${json_str}" | jq -r '.[] | @base64'); do
            _jq() {
            echo ${row} | base64 --decode | jq -r ${1}
            }
          echo $(_jq '.hostname')  ansible_connection=$(_jq '.connection') ansible_user=$(_jq '.username')
        done

        echo ''
        echo '[services]'
        for row in $(echo "${json_str}" | jq -r '.[] | @base64'); do
            _jq() {
            echo ${row} | base64 --decode | jq -r ${1}
            }
          echo $(_jq '.hostname')  ansible_connection=$(_jq '.connection') ansible_user=$(_jq '.username')
        done
      }
      create_inventory "$HOSTS" > $RUNNER_TEMP/inventory
    shell: bash
  - run: ansible -i $RUNNER_TEMP/inventory services -m ping
    shell: bash
  - run: |
      cat << EOF > $RUNNER_TEMP/playbook.yml
      - hosts: services
        roles:
          - role: bryopsida.nexus.node_systemd_service
            source_folder:  "{{ source_folder }}"
            should_restart: "{{ should_restart }}"
            description: "{{ description }}"
            after: "{{ after }}"
            working_directory: "{{ working_directory }}"
            start_command: "{{ start_command }}"
            restart_policy: "{{ restart_policy }}"
            target: "{{ target }}"
            service_name: "{{ service_name }}"
            node_version: "{{ node_version }}"
            service_account: "{{ service_account }}"
      EOF
    shell: bash
  - run: |
      ansible-playbook -i $RUNNER_TEMP/inventory $RUNNER_TEMP/playbook.yml \
       --extra-vars "service_name=${{ inputs.service_name }}" \
       --extra-vars "service_account=${{ inputs.service_account }}" \
       --extra-vars "source_folder=${{ inputs.source_folder }}" \
       --extra-vars "should_restart=${{ inputs.should_restart }}" \
       --extra-vars "description=${{ inputs.description }}" \
       --extra-vars "after=${{ inputs.after }}" \
       --extra-vars "working_directory=${{ inputs.working_directory }}" \
       --extra-vars "start_command=${{ inputs.start_command }}" \
       --extra-vars "restart_policy=${{ inputs.restart_policy }}" \
       --extra-vars "target=${{ inputs.target }}" \
       --extra-vars "node_version=${{ inputs.node_version }}" \
    shell: bash